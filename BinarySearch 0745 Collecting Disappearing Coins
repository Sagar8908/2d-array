class Solution {
public:
    int robber(const vector<int>& nums) {
        int dp1 = 0, dp2 = 0;
        for (int num : nums) {
            int temp = dp2;
            dp2 = max(dp1 + num, dp2);
            dp1 = temp;
        }
        return dp2;
    }
    
    int solve(vector<vector<int>>& M) {
        int n = M.size();
        if (n == 0) return 0;

        // Helper lambda function for 1D case
        auto maxRob = [this](const vector<int>& nums) {
            return robber(nums);
        };
        
        // Case 1: Exclude the first house
        vector<int> excludeFirst(M.size() - 1);
        for (int i = 0; i < M.size() - 1; ++i) {
            excludeFirst[i] = M[i][0];
        }
        int maxExcludingFirst = maxRob(excludeFirst);
        
        // Case 2: Exclude the last house
        vector<int> excludeLast(M.size() - 1);
        for (int i = 1; i < M.size(); ++i) {
            excludeLast[i - 1] = M[i][0];
        }
        int maxExcludingLast = maxRob(excludeLast);
        
        return max(maxExcludingFirst, maxExcludingLast);
    }
};
