class Solution {
public:
    int solve(vector<vector<int>>& M) {
        int m = M.size();
        int n = M[0].size();
        vector<vector<int>> ans(m, vector<int>(n, 0));

        // Process rows
        for (int i = 0; i < m; ++i) {
            int t = *max_element(M[i].begin(), M[i].end());
            for (int j = 0; j < n; ++j) {
                if (M[i][j] == t) {
                    ans[i][j] += 1;
                }
            }
        }

        // Process columns
        for (int j = 0; j < n; ++j) {
            int t = M[0][j];
            for (int i = 1; i < m; ++i) {
                t = max(t, M[i][j]);
            }
            for (int i = 0; i < m; ++i) {
                if (M[i][j] == t) {
                    ans[i][j] += 1;
                }
            }
        }

        // Count cells with value 2
        int count = 0;
        for (const auto& row : ans) {
            count += count_if(row.begin(), row.end(), [](int x) { return x == 2; });
        }

        return count;
    }
};
