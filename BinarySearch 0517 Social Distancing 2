class Solution {
public:
    int solve(vector<vector<int>>& M) {
        if (M.empty() || M[0].empty()) return 0;

        int m = M.size();
        int n = M[0].size();
        vector<vector<int>> dp(m, vector<int>(n, 0));
        int max_side = 0;

        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (M[i][j] == 1) {
                    if (i == 0 || j == 0) {
                        dp[i][j] = 1; // On the borders, the largest square is of size 1 if the cell is 1
                    } else {
                        dp[i][j] = min({dp[i-1][j], dp[i][j-1], dp[i-1][j-1]}) + 1;
                    }
                    max_side = max(max_side, dp[i][j]);
                }
            }
        }

        return (max_side + 1) / 2;
    }
};
