class Solution {
public:
    int solve(vector<vector<int>>& M) {
        int n = M.size();
        int m = M[0].size();
        
        vector<int> row = M[0];
        
        for (int i = 1; i < n; ++i) {
            vector<int> lft(m), rgh(m);
            
            // Calculate left-to-right maximum accumulations
            vector<int> left_accum(m);
            iota(left_accum.begin(), left_accum.end(), 0);
            for (int j = 0; j < m; ++j) {
                left_accum[j] += row[j];
            }
            partial_sum(left_accum.begin(), left_accum.end(), lft.begin(), [](int a, int b) { return max(a, b); });

            // Calculate right-to-left maximum accumulations
            vector<int> right_accum(m);
            iota(right_accum.rbegin(), right_accum.rend(), 0);
            for (int j = m - 1; j >= 0; --j) {
                right_accum[j] += row[j];
            }
            partial_sum(right_accum.rbegin(), right_accum.rend(), rgh.rbegin(), [](int a, int b) { return max(a, b); });

            // Update row with the maximum values
            for (int j = 0; j < m; ++j) {
                row[j] = M[i][j] + max(rgh[j] + j, lft[j] - j);
            }
        }
        
        return *max_element(row.begin(), row.end());
    }
};
