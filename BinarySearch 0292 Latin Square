class Solution {
public:
    bool solve(vector<vector<int>>& M) {
        int n = M.size();
        set<int> s;

        // Check rows
        for (const auto& row : M) {
            set<int> rset(row.begin(), row.end());
            if (rset.size() != n) {
                return false; // Not all elements are unique
            }
            s.insert(rset.begin(), rset.end());
        }

        // Check columns
        for (int j = 0; j < n; ++j) {
            set<int> cset;
            for (int i = 0; i < n; ++i) {
                cset.insert(M[i][j]);
            }
            if (cset.size() != n) {
                return false; // Not all elements are unique
            }
            s.insert(cset.begin(), cset.end());
        }

        // Check if the set contains all numbers from 0 to n-1
        for (int i = 0; i < n; ++i) {
            if (s.find(i) == s.end()) {
                return false; // Missing number
            }
        }

        return true;
    }
};
